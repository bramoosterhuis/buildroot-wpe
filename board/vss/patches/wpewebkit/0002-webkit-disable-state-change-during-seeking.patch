diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp
index a6aeb9a..9f781320 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp
@@ -378,15 +378,6 @@ bool MediaPlayerPrivateGStreamerMSE::doSeek()
         return m_seeking;
     }
 
-#if PLATFORM(BCM_NEXUS)
-    // When performing bufferedSeek, if the state is still playing, make it paused
-    // Seek will trigger state_change to Playing again
-    getStateResult = gst_element_get_state(m_pipeline.get(), &state, &newState, 0);
-    GST_DEBUG("StateResult:%d CurrentState:%s NewState:%s",getStateResult, gst_element_state_get_name(state), gst_element_state_get_name(newState));
-    if (state == GST_STATE_PLAYING) {
-        gst_element_set_state(m_pipeline.get(), GST_STATE_PAUSED);
-    }
-#endif
 
     GST_DEBUG("We can seek now");
 
@@ -578,6 +569,7 @@ void MediaPlayerPrivateGStreamerMSE::updateStates()
     GstState state, pending;
 
     GstStateChangeReturn getStateResult = gst_element_get_state(m_pipeline.get(), &state, &pending, 250 * GST_NSECOND);
+    const bool mseBuffering = !isTimeBuffered(currentMediaTime()) && !playbackPipelineHasFutureData();
 
     bool shouldUpdatePlaybackState = false;
     switch (getStateResult) {
@@ -611,15 +603,21 @@ void MediaPlayerPrivateGStreamerMSE::updateStates()
                 m_readyState = MediaPlayer::HaveMetadata;
                 // FIXME: Should we manage NetworkState too?
                 GST_DEBUG("m_readyState=%s", dumpReadyState(m_readyState));
-            } else if (m_buffering) {
-                if (m_bufferingPercentage == 100) {
+            } else if (mseBuffering || m_buffering) {
+                if (m_buffering && m_bufferingPercentage == 100) {
                     GST_DEBUG("[Buffering] Complete.");
                     m_buffering = false;
                     m_readyState = MediaPlayer::HaveEnoughData;
                     GST_DEBUG("m_readyState=%s", dumpReadyState(m_readyState));
                     m_networkState = m_downloadFinished ? MediaPlayer::Idle : MediaPlayer::Loading;
                 } else {
-                    m_readyState = MediaPlayer::HaveCurrentData;
+                    // The HAVE_CURRENT_DATA indicates that the data for immediate current playback position
+                    // is in place but the playback might not be able to move forward smoothly. Buffering in non-mse
+                    // sense is something like this because it triggers when there's still some data in the buffer
+                    // but a low watermark was hit. However in MSE case when the data for the current position is not
+                    // there in the buffer it's rather HAVE_META_DATA which means "No media data is available for
+                    // the immediate current playback position."
+                    m_readyState = mseBuffering ? MediaPlayer::HaveMetadata : MediaPlayer::HaveCurrentData;
                     GST_DEBUG("m_readyState=%s", dumpReadyState(m_readyState));
                     m_networkState = MediaPlayer::Loading;
                 }
@@ -641,12 +639,7 @@ void MediaPlayerPrivateGStreamerMSE::updateStates()
             ASSERT_NOT_REACHED();
             break;
         }
-#if PLATFORM(BROADCOM)
-        // this code path needs a proper review in case it can be generalized to all platforms.
-        bool buffering = !isTimeBuffered(currentMediaTime()) && !playbackPipelineHasFutureData();
-#else
-        bool buffering = m_buffering;
-#endif
+        const bool buffering = m_buffering || mseBuffering;
         // Sync states where needed.
         if (state == GST_STATE_PAUSED) {
             if (!m_volumeAndMuteInitialized) {
@@ -654,16 +647,7 @@ void MediaPlayerPrivateGStreamerMSE::updateStates()
                 notifyPlayerOfMute();
                 m_volumeAndMuteInitialized = true;
             }
-
-#if PLATFORM(BCM_NEXUS)
-            if (!isTimeBuffered(currentMediaTime()) && !playbackPipelineHasFutureData()) {
-                m_readyState = MediaPlayer::HaveMetadata;
-            }
-            else
-#endif
-            if (!isTimeBuffered(currentMediaTime()) && !playbackPipelineHasFutureData()) {
-                m_readyState = MediaPlayer::HaveMetadata;
-            } else if (!seeking() && !buffering && !m_paused && m_playbackRate) {
+            if (!seeking() && !buffering && !m_paused && m_playbackRate) {
                 GST_DEBUG("[Buffering] Restarting playback.");
                 changePipelineState(GST_STATE_PLAYING);
             }
