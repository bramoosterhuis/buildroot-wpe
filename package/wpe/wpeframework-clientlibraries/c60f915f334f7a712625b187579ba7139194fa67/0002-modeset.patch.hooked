--- a/Source/compositorclient/RPI/Implementation.cpp
+++ b/Source/compositorclient/RPI/Implementation.cpp
@@ -749,16 +749,16 @@ Display::SurfaceImplementation::SurfaceImplementation(
 
     _display.AddRef();
 
-    // To support scanout the underlying FB should be large enough to support the selected mode
-    // An FB of 1280x720 on a 1920x1080 display will probably fail. Currently, they should have 
-    // equal dimensions
+    // To support scanout the underlying buffer should be large enough to support the selected mode
+    // A buffer of smaller dimensions than the display will fail. A larger one is possible but will
+    // probably fail in the current setup. Currently, it is best to give both equal dimensions
 
-    if ((width > _display.DisplaySizeWidth()) || (height >  _display.DisplaySizeHeight())) {
+    if ((width != _display.DisplaySizeWidth()) || (height != _display.DisplaySizeHeight())) {
         TRACE_L1(_T("Requested surface dimensions [%d, %d] might not be honered. Rendering might fail!"), width, height);
 
         // Truncating
-        if (realWidth  > _display.DisplaySizeWidth())  { realWidth  = _display.DisplaySizeWidth();  }
-        if (realHeight > _display.DisplaySizeHeight()) { realHeight = _display.DisplaySizeHeight(); }
+        if (realWidth  != _display.DisplaySizeWidth())  { realWidth  = _display.DisplaySizeWidth();  }
+        if (realHeight != _display.DisplaySizeHeight()) { realHeight = _display.DisplaySizeHeight(); }
     }
 
     EGLSurface nativeSurface = Platform::Instance().CreateSurface(_display.Native(), realWidth, realHeight);
--- a/Source/compositorclient/RPI/ModeSet.cpp
+++ b/Source/compositorclient/RPI/ModeSet.cpp
@@ -3,24 +3,44 @@
 #include <vector>
 #include <list>
 #include <string>
-#include <assert.h>
+#include <cassert>
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <unistd.h>
 #include <fcntl.h>
-#include <drm_fourcc.h>
+#include <drm/drm_fourcc.h>
 #include <xf86drm.h>
 #include <xf86drmMode.h>
 #include <gbm.h>
-#include <drm_fourcc.h>
 
 #define DRM_MAX_DEVICES 16
 
+#ifdef __cplusplus
+}
+#endif
+
+#include <limits>
+
+static constexpr uint8_t DrmMaxDevices()
+{
+    // Just an arbitrary choice
+    return 16;
+}
+
 static void GetNodes(uint32_t type, std::vector<std::string>& list)
 {
-    drmDevicePtr devices[DRM_MAX_DEVICES];
+    drmDevicePtr devices[DrmMaxDevices()];
 
-    int device_count = drmGetDevices2(0 /* flags */, &devices[0], DRM_MAX_DEVICES);
+    static_assert(sizeof(DrmMaxDevices()) <= sizeof(int));
+    static_assert(std::numeric_limits<decltype(DrmMaxDevices())>::max() <= std::numeric_limits<int>::max());
+
+    int device_count = drmGetDevices2(0 /* flags */, &devices[0], static_cast<int>(DrmMaxDevices()));
 
     if (device_count > 0)
     {
@@ -50,22 +70,24 @@ static void GetNodes(uint32_t type, std::vector<std::string>& list)
 
 static int FileDescriptor()
 {
-    int fd = -1;
+    static int fd = -1;
 
-    std::vector<std::string> nodes;
-    GetNodes(DRM_NODE_PRIMARY, nodes);
+    if(fd < 0) {
+        std::vector<std::string> nodes;
+        GetNodes(DRM_NODE_PRIMARY, nodes);
 
-    std::vector<std::string>::iterator index(nodes.begin());
+        std::vector<std::string>::iterator index(nodes.begin());
 
-    while ((index != nodes.end()) && (fd == -1)) {
-        // Select the first from the list
-        if (index->empty() == false)
-        {
-            // The node might be priviliged and the call will fail.
-            // Do not close fd with exec functions! No O_CLOEXEC!
-            fd = open(index->c_str(), O_RDWR); 
+        while ((index != nodes.end()) && (fd == -1)) {
+            // Select the first from the list
+            if (index->empty() == false)
+            {
+                // The node might be priviliged and the call will fail.
+                // Do not close fd with exec functions! No O_CLOEXEC!
+                fd = open(index->c_str(), O_RDWR); 
+            }
+            index++;
         }
-        index++;
     }
     return (fd);
 }
@@ -207,6 +229,7 @@ static bool CreateBuffer(int fd, const uint32_t connector, gbm_device*& device,
 {
     assert(fd != -1);
 
+    bool created = false;
     buffer = nullptr;
     modeIndex = 0;
     id = 0;
@@ -255,38 +278,46 @@ static bool CreateBuffer(int fd, const uint32_t connector, gbm_device*& device,
                 index++;
             }
 
-            drmModeFreeConnector(pconnector);
-
             // A large enough initial buffer for scan out
             struct gbm_bo* bo = gbm_bo_create(
                                   device, 
                                   pconnector->modes[modeIndex].hdisplay,
                                   pconnector->modes[modeIndex].vdisplay,
-                                  DRM_FORMAT_XRGB8888, 
+                                  ModeSet::SupportedBufferType(),
                                   GBM_BO_USE_SCANOUT /* presented on a screen */ | GBM_BO_USE_RENDERING /* used for rendering */);
 
+            drmModeFreeConnector(pconnector);
+
             if(nullptr != bo)
             {
                 // Associate a frame buffer with this bo
                 int32_t fb_fd = gbm_device_get_fd(device);
 
+                uint32_t format = gbm_bo_get_format(bo);
+
+                assert (format == DRM_FORMAT_XRGB8888 || format == DRM_FORMAT_ARGB8888);
+
+                uint32_t bpp = gbm_bo_get_bpp(bo);
+
                 int32_t ret = drmModeAddFB(
                                 fb_fd, 
                                 gbm_bo_get_width(bo), 
                                 gbm_bo_get_height(bo), 
-                                24, 32, 
+                                format != DRM_FORMAT_ARGB8888 ? bpp - 8 : bpp,
+                                bpp,
                                 gbm_bo_get_stride(bo), 
                                 gbm_bo_get_handle(bo).u32, &id);
 
                 if(0 == ret)
                 {
                     buffer = bo;
+                    created = true;
                 }
             }
         }
     }
 
-    return false;
+   return created;
 }
 
 ModeSet::ModeSet()
@@ -297,29 +328,49 @@ ModeSet::ModeSet()
     , _buffer(nullptr)
 {
     if (drmAvailable() > 0) {
+        if (Create() == false) {
+            // We are NOT initialized properly, destruct !!!
+            Destruct();
+        }
+    }
+}
 
-        int fd = FileDescriptor();
+bool ModeSet::Create()
+{
+    bool enabled = false;
 
-        if (fd != -1)
-        {
-            uint32_t id;
+    int fd = FileDescriptor();
 
-            if ( (FindProperDisplay(fd, _crtc, _encoder, _connector, _fb) == false) ||
-                 (CreateBuffer(fd, _connector, _device, _mode, id, _buffer) == false) ||
-                 (drmSetMaster(fd) != 0)  ) 
-            {
-                // We are NOT initialized properly, destruct !!!
-                Destruct();
-            }
+    if(fd >= 0) {
+        if ( (FindProperDisplay(fd, _crtc, _encoder, _connector, _fb) == false) ||
+/* TODO: Changes the original fb which might not be what is intended */
+             (CreateBuffer(fd, _connector, _device, _mode, _fb, _buffer) == false) ||
+             (drmSetMaster(fd) != 0) ) {
+        }
+        else {
+            drmModeConnectorPtr pconnector = drmModeGetConnector(fd, _connector);
+
+            if(pconnector != nullptr) {
+                /* At least one mode has to be set */
+                enabled = (0 == drmModeSetCrtc(fd, _crtc, _fb, 0, 0, &_connector, 1, &(pconnector->modes[_mode])));
 
-            close(fd);
+                drmModeFreeConnector(pconnector);
+            }
         }
     }
+
+    return enabled;
 }
 
 ModeSet::~ModeSet()
 {
     Destruct();
+
+    int fd = FileDescriptor();
+
+    if(fd >= 0) {
+        close(fd);
+    }
 }
 
 void ModeSet::Destruct()
@@ -344,6 +395,7 @@ void ModeSet::Destruct()
 
 uint32_t ModeSet::Width() const
 {
+    // Derived from modinfo if CreateBuffer was called prior to this
     uint32_t width = 0;
 
     if (nullptr != _buffer)
@@ -356,6 +408,7 @@ uint32_t ModeSet::Width() const
 
 uint32_t ModeSet::Height() const
 {
+    // Derived from modinfo if CreateBuffer was called prior to this
     uint32_t height = 0;
 
     if (nullptr != _buffer)
@@ -373,7 +426,7 @@ struct gbm_surface* ModeSet::CreateRenderTarget(const uint32_t width, const uint
 
     if(nullptr != _device)
     {
-        result = gbm_surface_create(_device, width, height, DRM_FORMAT_XRGB8888, GBM_BO_USE_SCANOUT /* presented on a screen */ | GBM_BO_USE_RENDERING /* used for rendering */);
+        result = gbm_surface_create(_device, width, height, SupportedBufferType(), GBM_BO_USE_SCANOUT /* presented on a screen */ | GBM_BO_USE_RENDERING /* used for rendering */);
     }
 
     return result;
@@ -383,8 +436,6 @@ void ModeSet::DestroyRenderTarget(struct gbm_surface* surface)
 {
     if (nullptr != surface)
     {
-        gbm_surface_release_buffer(surface, _buffer);
-
         gbm_surface_destroy(surface);
     }
 }
--- a/Source/compositorclient/RPI/ModeSet.h
+++ b/Source/compositorclient/RPI/ModeSet.h
@@ -1,7 +1,17 @@
 #pragma once
 
-#include <stdint.h>
+#include <cstdint>
+#include <limits>
 
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+#include <drm/drm_fourcc.h>
+#ifdef __cplusplus
+}
+#endif
+ 
 class ModeSet
 {
     public:
@@ -18,11 +28,31 @@ class ModeSet
         }
         uint32_t Width() const;
         uint32_t Height() const;
+        static constexpr uint32_t SupportedBufferType()
+        {
+            static_assert(sizeof(uint32_t) >= sizeof(DRM_FORMAT_XRGB8888));
+            static_assert(std::numeric_limits<decltype(DRM_FORMAT_XRGB8888)>::min() >= std::numeric_limits<uint32_t>::min());
+            static_assert(std::numeric_limits<decltype(DRM_FORMAT_XRGB8888)>::max() <= std::numeric_limits<uint32_t>::max());
+
+            // DRM_FORMAT_ARGB8888 and DRM_FORMAT_XRGB888 should be considered equivalent / interchangeable
+//            return static_cast<uint32_t>(DRM_FORMAT_ARGB8888);
+            return static_cast<uint32_t>(DRM_FORMAT_XRGB8888);
+        }
+        static constexpr uint8_t BPP()
+        {
+            // See SupportedBufferType(), total number of bits representing all channels
+            return 32;
+        }
+        static constexpr uint8_t ColorDepth()
+        {
+            // See SupportedBufferType(), total number of bits representing the R, G, B channels
+            return 24;
+        }
         struct gbm_surface* CreateRenderTarget(const uint32_t width, const uint32_t height);
         void DestroyRenderTarget(struct gbm_surface* surface);
 
     private:
-        int  Open();
+        bool Create();
         void Destruct();
 
     private :
